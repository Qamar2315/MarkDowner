# Source: client\tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

# Source: client\src\App.js
import React, { useState } from 'react';
import axios from 'axios';

export default function MarkDowner() {
    const [markdown, setMarkdown] = useState('');
    const [file, setFile] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    const BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:5000';

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);
        setLoading(true);

        const formData = new FormData();
        if (markdown) formData.append('markdown', markdown);
        if (file) formData.append('file', file);

        try {
            const response = await axios.post(`${BASE_URL}/convert`, formData, {
                responseType: 'blob',
                headers: { 'Content-Type': 'multipart/form-data' },
            });

            const url = window.URL.createObjectURL(response.data);
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', 'output.pdf');
            document.body.appendChild(link);
            link.click();
        } catch (err) {
            console.error('Error converting to PDF:', err);
            setError('Failed to convert Markdown to PDF. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-100 via-purple-200 to-pink-100 flex items-center justify-center p-4">
            <div className="bg-white shadow-lg rounded-lg max-w-lg w-full p-6">
                <h1 className="text-3xl font-bold text-center text-purple-600 mb-4">MarkDowner</h1>
                <p className="text-gray-600 text-center mb-6">
                    Convert your Markdown text or files to PDF effortlessly.
                </p>
                <form onSubmit={handleSubmit} className="space-y-4">
                    <textarea
                        className="w-full h-32 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"
                        value={markdown}
                        onChange={(e) => setMarkdown(e.target.value)}
                        placeholder="Enter Markdown text here..."
                    ></textarea>

                    <div className="flex items-center space-x-2">
                        <label
                            htmlFor="file"
                            className="bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded cursor-pointer"
                        >
                            Upload .md File
                        </label>
                        <input
                            id="file"
                            type="file"
                            accept=".md"
                            className="hidden"
                            onChange={(e) => setFile(e.target.files[0])}
                        />
                        {file && <span className="text-sm text-gray-600">{file.name}</span>}
                    </div>

                    {error && <p className="text-red-500 text-sm">{error}</p>}

                    <button
                        type="submit"
                        className={`w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded ${
                            loading ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={loading}
                    >
                        {loading ? 'Converting...' : 'Convert to PDF'}
                    </button>
                </form>
            </div>
        </div>
    );
}


# Source: client\src\App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


# Source: client\src\index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


# Source: client\src\reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


# Source: client\src\setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


# Source: server\app.py
from flask import Flask, request, send_file
from flask_cors import CORS
from werkzeug.utils import secure_filename
from utils import markdown_to_pdf
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

UPLOAD_FOLDER = 'uploads'

# Ensure the uploads folder exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/convert', methods=['POST'])
def convert():
    markdown_text = request.form.get('markdown')
    uploaded_file = request.files.get('file')

    if not markdown_text and not uploaded_file:
        return "No Markdown text or file provided", 400

    try:
        if markdown_text:
            markdown_to_pdf(markdown_text, 'output.pdf')
        elif uploaded_file:
            filename = secure_filename(uploaded_file.filename)
            if not filename.endswith('.md'):
                return "Invalid file type. Please upload a .md file.", 400

            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            uploaded_file.save(filepath)

            with open(filepath, 'r', encoding='utf-8') as file:
                markdown_content = file.read()

            markdown_to_pdf(markdown_content, 'output.pdf')

        return send_file('output.pdf', as_attachment=True)

    except Exception as e:
        return f"Error: {e}", 500

if __name__ == '__main__':
    app.run(debug=True)


# Source: server\utils.py
from xhtml2pdf import pisa
import markdown2

def markdown_to_pdf(markdown_text, output_filename):
    html = markdown2.markdown(markdown_text, extras=['fenced-code-blocks', 'tables'])  # Include necessary extras

    # Wrap HTML with <style> for improved code block rendering
    styled_html = f"""
    <html>
    <head>
    <style>
    pre {{
        background-color: #f0f0f0; 
        padding: 10px;
        border-radius: 5px;
        font-family: monospace; 
        white-space: pre-wrap;
        overflow-x: auto;  /* Add horizontal scrolling for long lines */
    }}
    code {{
        font-family: monospace; 
    }}
    table {{
        width: 100%;
        border-collapse: collapse;
    }}
    th, td {{
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }}
    </style>
    </head>
    <body>
    {html}
    </body>
    </html>
    """

    pisa.CreatePDF(styled_html, dest=open(output_filename, "wb"))


